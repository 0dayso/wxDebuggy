<?xml version="1.0" encoding="utf-8"?>
<note version="0.2" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Version 0.2</title>
  <text xml:space="preserve"><note-content version="0.1">Version 0.2

<size:large>Circuit Drawing Enhancements - Place and Route (PnR)</size:large>

<size:large>Placement</size:large>

The placement of a given instanciation/block on the schematic page depends on what other blocks it drives, and which blocks are driving it.

The first algorithm that I came up for (notebook 20-NOV-06) uses a recursive algorithm to 'columnize' the blocks.  The input to this algorithm is a dictionary of drivers and sinks in the following form:

<monospace>        inst_driver_dict = { 'A':['iPorts'],
                             'B':['A'],
                             'C':['iPorts'],
                             'D':['C'],
                             'E':['C'],
                             'F':['B','D','E'],
                             'G':['F','H'],
                             'H':['G'],
                             'I':['G','F'],
                             'oPorts':['H','I'],
                             'iPorts':[]} </monospace>


This seems to work quite well in the test script <monospace>p_r_columns.py</monospace>, but to mesh it in with my program I need to generate this dictionary for the schematic to be displayed.

To find out what is connected where, I build a drivers dictionary first. I go thru all the .pin(net) connections of each instance in the circuit to be drawn, and add them to the drivers dictionary depending on the direction of the pin.  The driving thing is the key, and the driven thing is appended to the list of things the driver drives.

<size:large>02-SEP-07</size:large>: It looks like I have to treat clock and reset nets specially.  When they're included in the above columnizing algorithm, they tend to make a mess of the layout.  It's really the signal flow that I'm trying to graph in this app, so I'm going to remove any clock and reset (and enable?) lines from the connection list.  

For now, I'm going to determine clock and reset nets by looking at their names.  But in the future, I'll determine them properly by inspecting the clocked always blocks.

To vv.Net, I'll add a 'sigtype' variable and set this to 'clock' or 'reset' depending on the name.  Then, when building the connection list for a drawing, I'll look at this line and only include the conection if this variable has the 'normal' value.

Things are complicated even more by the fact that I don't preserve the objects when I'm building driver and point-to-point dicts/list.  At the minute, these are text based, so it's not easy to access the '<monospace>sigtype</monospace>' for ports and nets.  And even at that, I actually don't build a <monospace>vv.Net</monospace> list for each module yet...
 
<size:large>04-SEP-07</size:large>: Owing to the fact that I currently keep my connection lists as strings, I'm going to have to go fully OO to get access to the 'sigtype' field.  To this end, I'm going to have to make each vv.Instance reference a vv.Module: ie: <monospace>self.module_ref = &lt;vv.Module&gt;</monospace>, not <monospace>self.module_ref = "module_name"</monospace> 

<size:large>06-SEP-07</size:large>: But I really hate the idea of self.module_ref changing from a string at the parser to a vv.Module at the drawing code - it's confusing.  So to that end, the parser will fill the new vv.Instance.module_ref_name as a string, and then when I'm building the hierarchy tree, vv.Instance.module_ref will point to the appropriate vv.Module object (if it exists).  So this is changes as of Rev 20.

Now, the whole point of this was to be able to get at the vv.Port information when building the connection list.  So the next thing I have to do is to store the connection info in some kind of OO format rather than a string format.  So, whats that going to be? A (vv.Port,vv.Port) tuple?  If that's the case, then each vv.Port is going to need a reference to its vv.Module...  

<size:large>07-SEP-07</size:large>: This also means that nets must know which module they're in too – and at the minute, I don't bother filling the vv.Net list in each vv.Module.  This has to change.  vv.Port will inherit from vv.Net... Maybe I should put it in vv.Object altogether?  But a vv.Module won't have the reference...

Right. Each vv.Net (and hence vv.Port) now has a vv.Module reference.  

Then, I'm building the driver list in objectorientated land.  Next, I can easily build point-to-point connections in OO land too. But my 'columnize' algorithm needs block-to-block.

<size:large>13-SEP-07</size:large>: This is not good enough.  vv.Ports and vv.Nets may now know which vv.Module they're in, but for connections I need a vv.Instance name too...


<size:large>15-SEP-07</size:large>: I've regressed slightly.  No longer building the connection lists in OO land.  But the old way with strings was very ugly too.  So now I build them using tuples...  If I implement the ignorance of clk and reset connections when columnising,  I can mark off the 1st bullet point for version 0.2! Actually no I can't... I still have to place things in the Y-axis.  Bollix.

I'm really not that much further on since I imported the version I'd developped on me laptop...

I think I'm missing an instanciation -&gt; module dict too... ?

<size:large>11-OCT-08</size:large>: (Nearly a month on?!?!?!)
I've decided that the Y-placement of the instanciations in a given module are going to be determined by whatever combination gives the minimum 'sum of the net flight lengths'.  This may not be of any use if there is no minima.  First cut, I'm going to forget about the O(n)^2 or whatever of the algorithm - I'm just going combo to see if it works. Also, the columising algorithm that I've implemented is not going to waste - I just have to determine the (x,y) of each instanciation.

0.2 is a serious bitch and it's taking all of my self control not to go and do other stuff which is easier.  But at the end of the day, this app is pointless until I get a nice (or at least usable) place &amp; route thing going.





<size:large>Signal Routing</size:large></note-content></text>
  <last-change-date>2007-10-11T22:59:51.3166980+01:00</last-change-date>
  <create-date>2007-08-27T01:03:33.2981770+01:00</create-date>
  <cursor-position>5574</cursor-position>
  <width>962</width>
  <height>767</height>
  <x>123</x>
  <y>45</y>
</note>